version: '3'

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

tasks:
  npm-build:
    desc: Build the static NPM frountend project
    summary: |
      Build the project
      requires:
      - PATH: The path to the project
      - CF_PUSH: [default => false] Push to CloudFront
      - CF_DISTRIBUTION_ID: [optional] The CloudFront distribution ID 
      - CF_S3_BUCKET: [optional] The S3 bucket to push to
    requires:
      vars:
      - PATH
    vars:
      BUILD_PATH: '{{default "build" .BUILD_PATH}}'
      CF_PUSH: '{{default "false" .CF_PUSH}}'
      CF_DISTRIBUTION_ID: '{{default "" .CF_DISTRIBUTION_ID}}'
      CF_S3_BUCKET: '{{default "" .CF_S3_BUCKET}}'
    dir: '{{.PATH}}'
    cmds:
      - |
        echo "Path: $(pwd)"
        yarn install
        yarn run build
      - |
        if [ "{{.CF_PUSH}}" == "true" ]; then
          echo "Pushing to CloudFront"
          aws s3 sync ./{{.BUILD_PATH}}/ s3://{{.CF_S3_BUCKET}} --delete
          aws cloudfront create-invalidation --distribution-id {{.CF_DISTRIBUTION_ID}} --paths "/*"
        fi
  
  ecr-build-and-push:
    desc: Build and push docker image to ECR
    summary: |
      Build and push docker image to ECR
      requires:
      - PATH: The path to the Dockerfile
      - ECR_REPOSITORY: The name of the ECR repository
    requires:
      vars:
      - PATH
      - ECR_REPOSITORY
    vars:
      AWS_DEFAULT_REGION: '{{default "us-east-1" .AWS_DEFAULT_REGION}}'
      IMAGE_TAG: '{{default "latest" .IMAGE_TAG}}'
      ECR_REGISTRY:
        sh: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text);
          echo "${ACCOUNT_ID}.dkr.ecr.{{.AWS_DEFAULT_REGION}}.amazonaws.com"
    cmds:
      - |
        echo "Building image for ECR: {{.ECR_REGISTRY}}/{{.ECR_REPOSITORY}}:{{.IMAGE_TAG}}"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text);
        aws ecr get-login-password --region "{{.AWS_DEFAULT_REGION}}" | docker login --username AWS --password-stdin "{{.ECR_REGISTRY}}";
        docker build -t "{{.ECR_REGISTRY}}/{{.ECR_REPOSITORY}}:{{.IMAGE_TAG}}" "{{.PATH}}"
      - |
        echo "Pushing image to ECR: {{.ECR_REGISTRY}}/{{.ECR_REPOSITORY}}:{{.IMAGE_TAG}}"
        docker push "{{.ECR_REGISTRY}}/{{.ECR_REPOSITORY}}:{{.IMAGE_TAG}}"

  ssh:
    desc: SSH into a server
    summary: |
      SSH into a server
      requires:
      - HOST: The host to connect to
      - USER: The user to connect as
      - ARGS: [optional] Additional arguments to pass to the ssh command eg: "-i /path/to/key.pem"
      - COMMAND: The command to run
    requires:
      vars:
      - HOST
      - USER
      - COMMAND
    vars:
      ARGS: '{{default "" .ARGS}}'
    cmds:
      - |
        echo "{{.ARGS}}"
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          {{.ARGS}} {{.USER}}@{{.HOST}} '{{.COMMAND}}'

  ssm:
    desc: Run a command on a remote server using SSM
    summary: |
      Run a command on a remote server using SSM
      requires:
      - INSTANCE_ID: The instance ID
      - COMMAND: The command to run
    requires:
      vars:
      - INSTANCE_ID
      - COMMAND
    cmds:
      - |
        aws ssm send-command --instance-ids {{.INSTANCE_ID}} \
          --document-name "AWS-RunShellScript" \
          --comment "Run a command" \
          --parameters commands="{{.COMMAND}}" \
          --output text
